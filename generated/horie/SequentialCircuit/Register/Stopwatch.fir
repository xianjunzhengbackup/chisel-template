circuit Stopwatch :
  module SRLatch :
    input clock : Clock
    input reset : Reset
    output io : { flip set : UInt<1>, flip reset : UInt<1>, q : UInt<1>, notQ : UInt<1>}

    node _io_q_T = or(io.reset, io.notQ) @[SRLatch.scala 13:22]
    node _io_q_T_1 = not(_io_q_T) @[SRLatch.scala 13:11]
    io.q <= _io_q_T_1 @[SRLatch.scala 13:8]
    node _io_notQ_T = or(io.set, io.q) @[SRLatch.scala 14:23]
    node _io_notQ_T_1 = not(_io_notQ_T) @[SRLatch.scala 14:14]
    io.notQ <= _io_notQ_T_1 @[SRLatch.scala 14:11]

  module Debounce :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<1>, out : UInt<1>}

    reg reg1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Debounce.scala 12:21]
    reg1 <= io.in @[Debounce.scala 13:8]
    reg reg2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Debounce.scala 14:21]
    reg2 <= reg1 @[Debounce.scala 15:8]
    node _detectFallingEdge_T = not(reg1) @[Debounce.scala 22:28]
    node _detectFallingEdge_T_1 = and(_detectFallingEdge_T, reg2) @[Debounce.scala 22:34]
    node detectFallingEdge = eq(_detectFallingEdge_T_1, UInt<1>("h1")) @[Debounce.scala 22:41]
    node _detectRisingEdge_T = not(reg2) @[Debounce.scala 23:27]
    node _detectRisingEdge_T_1 = and(_detectRisingEdge_T, reg1) @[Debounce.scala 23:33]
    node detectRisingEdge = eq(_detectRisingEdge_T_1, UInt<1>("h1")) @[Debounce.scala 23:40]
    node _onems_f_T = eq(io.in, UInt<1>("h0")) @[Debounce.scala 26:18]
    reg onems_f_c_value : UInt<3>, clock with :
      reset => (detectFallingEdge, UInt<3>("h0")) @[Counter.scala 61:40]
    wire onems_f : UInt<1> @[Counter.scala 117:24]
    onems_f <= UInt<1>("h0") @[Counter.scala 117:24]
    when _onems_f_T : @[Counter.scala 118:16]
      node onems_f_wrap_wrap = eq(onems_f_c_value, UInt<3>("h4")) @[Counter.scala 73:24]
      node _onems_f_wrap_value_T = add(onems_f_c_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _onems_f_wrap_value_T_1 = tail(_onems_f_wrap_value_T, 1) @[Counter.scala 77:24]
      onems_f_c_value <= _onems_f_wrap_value_T_1 @[Counter.scala 77:15]
      when onems_f_wrap_wrap : @[Counter.scala 87:20]
        onems_f_c_value <= UInt<1>("h0") @[Counter.scala 87:28]
      onems_f <= onems_f_wrap_wrap @[Counter.scala 118:23]
    node _onems_r_T = eq(io.in, UInt<1>("h1")) @[Debounce.scala 29:18]
    reg onems_r_c_value : UInt<3>, clock with :
      reset => (detectRisingEdge, UInt<3>("h0")) @[Counter.scala 61:40]
    wire onems_r : UInt<1> @[Counter.scala 117:24]
    onems_r <= UInt<1>("h0") @[Counter.scala 117:24]
    when _onems_r_T : @[Counter.scala 118:16]
      node onems_r_wrap_wrap = eq(onems_r_c_value, UInt<3>("h4")) @[Counter.scala 73:24]
      node _onems_r_wrap_value_T = add(onems_r_c_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _onems_r_wrap_value_T_1 = tail(_onems_r_wrap_value_T, 1) @[Counter.scala 77:24]
      onems_r_c_value <= _onems_r_wrap_value_T_1 @[Counter.scala 77:15]
      when onems_r_wrap_wrap : @[Counter.scala 87:20]
        onems_r_c_value <= UInt<1>("h0") @[Counter.scala 87:28]
      onems_r <= onems_r_wrap_wrap @[Counter.scala 118:23]
    inst sr_latch of SRLatch @[Debounce.scala 31:24]
    sr_latch.clock <= clock
    sr_latch.reset <= reset
    sr_latch.io.reset <= onems_f @[Debounce.scala 32:21]
    sr_latch.io.set <= onems_r @[Debounce.scala 33:19]
    io.out <= sr_latch.io.q @[Debounce.scala 34:10]

  module Seg7LED :
    input clock : Clock
    input reset : Reset
    output io : { flip digits : UInt<4>[8], seg7led : { cathodes : UInt<7>, decimalPoint : UInt<1>, anodes : UInt<8>}}

    reg digitChangeCount : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    wire digitChange : UInt<1> @[Counter.scala 117:24]
    digitChange <= UInt<1>("h0") @[Counter.scala 117:24]
    when UInt<1>("h1") : @[Counter.scala 118:16]
      node wrap_wrap = eq(digitChangeCount, UInt<4>("h9")) @[Counter.scala 73:24]
      node _wrap_value_T = add(digitChangeCount, UInt<1>("h1")) @[Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 77:24]
      digitChangeCount <= _wrap_value_T_1 @[Counter.scala 77:15]
      when wrap_wrap : @[Counter.scala 87:20]
        digitChangeCount <= UInt<1>("h0") @[Counter.scala 87:28]
      digitChange <= wrap_wrap @[Counter.scala 118:23]
    reg digitIndex : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 61:40]
    wire digitWrap : UInt<1> @[Counter.scala 117:24]
    digitWrap <= UInt<1>("h0") @[Counter.scala 117:24]
    when digitChange : @[Counter.scala 118:16]
      node wrap_wrap_1 = eq(digitIndex, UInt<3>("h7")) @[Counter.scala 73:24]
      node _wrap_value_T_2 = add(digitIndex, UInt<1>("h1")) @[Counter.scala 77:24]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 77:24]
      digitIndex <= _wrap_value_T_3 @[Counter.scala 77:15]
      digitWrap <= wrap_wrap_1 @[Counter.scala 118:23]
    node _io_seg7led_cathodes_T = eq(io.digits[digitIndex], UInt<1>("h0")) @[Seg7LED.scala 20:15]
    node _io_seg7led_cathodes_T_1 = eq(io.digits[digitIndex], UInt<1>("h1")) @[Seg7LED.scala 21:15]
    node _io_seg7led_cathodes_T_2 = eq(io.digits[digitIndex], UInt<2>("h2")) @[Seg7LED.scala 22:15]
    node _io_seg7led_cathodes_T_3 = eq(io.digits[digitIndex], UInt<2>("h3")) @[Seg7LED.scala 23:15]
    node _io_seg7led_cathodes_T_4 = eq(io.digits[digitIndex], UInt<3>("h4")) @[Seg7LED.scala 24:15]
    node _io_seg7led_cathodes_T_5 = eq(io.digits[digitIndex], UInt<3>("h5")) @[Seg7LED.scala 25:15]
    node _io_seg7led_cathodes_T_6 = eq(io.digits[digitIndex], UInt<3>("h6")) @[Seg7LED.scala 26:15]
    node _io_seg7led_cathodes_T_7 = eq(io.digits[digitIndex], UInt<3>("h7")) @[Seg7LED.scala 27:15]
    node _io_seg7led_cathodes_T_8 = eq(io.digits[digitIndex], UInt<4>("h8")) @[Seg7LED.scala 28:15]
    node _io_seg7led_cathodes_T_9 = eq(io.digits[digitIndex], UInt<4>("h9")) @[Seg7LED.scala 29:15]
    node _io_seg7led_cathodes_T_10 = eq(io.digits[digitIndex], UInt<4>("ha")) @[Seg7LED.scala 30:15]
    node _io_seg7led_cathodes_T_11 = eq(io.digits[digitIndex], UInt<4>("hb")) @[Seg7LED.scala 31:15]
    node _io_seg7led_cathodes_T_12 = eq(io.digits[digitIndex], UInt<4>("hc")) @[Seg7LED.scala 32:15]
    node _io_seg7led_cathodes_T_13 = eq(io.digits[digitIndex], UInt<4>("hd")) @[Seg7LED.scala 33:15]
    node _io_seg7led_cathodes_T_14 = eq(io.digits[digitIndex], UInt<4>("he")) @[Seg7LED.scala 34:15]
    node _io_seg7led_cathodes_T_15 = eq(io.digits[digitIndex], UInt<4>("hf")) @[Seg7LED.scala 35:15]
    node _io_seg7led_cathodes_T_16 = mux(_io_seg7led_cathodes_T_15, UInt<4>("he"), UInt<7>("h7f")) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_17 = mux(_io_seg7led_cathodes_T_14, UInt<3>("h6"), _io_seg7led_cathodes_T_16) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_18 = mux(_io_seg7led_cathodes_T_13, UInt<6>("h21"), _io_seg7led_cathodes_T_17) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_19 = mux(_io_seg7led_cathodes_T_12, UInt<7>("h46"), _io_seg7led_cathodes_T_18) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_20 = mux(_io_seg7led_cathodes_T_11, UInt<2>("h3"), _io_seg7led_cathodes_T_19) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_21 = mux(_io_seg7led_cathodes_T_10, UInt<4>("h8"), _io_seg7led_cathodes_T_20) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_22 = mux(_io_seg7led_cathodes_T_9, UInt<5>("h10"), _io_seg7led_cathodes_T_21) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_23 = mux(_io_seg7led_cathodes_T_8, UInt<1>("h0"), _io_seg7led_cathodes_T_22) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_24 = mux(_io_seg7led_cathodes_T_7, UInt<7>("h58"), _io_seg7led_cathodes_T_23) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_25 = mux(_io_seg7led_cathodes_T_6, UInt<2>("h2"), _io_seg7led_cathodes_T_24) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_26 = mux(_io_seg7led_cathodes_T_5, UInt<5>("h12"), _io_seg7led_cathodes_T_25) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_27 = mux(_io_seg7led_cathodes_T_4, UInt<5>("h19"), _io_seg7led_cathodes_T_26) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_28 = mux(_io_seg7led_cathodes_T_3, UInt<6>("h30"), _io_seg7led_cathodes_T_27) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_29 = mux(_io_seg7led_cathodes_T_2, UInt<6>("h24"), _io_seg7led_cathodes_T_28) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_30 = mux(_io_seg7led_cathodes_T_1, UInt<7>("h79"), _io_seg7led_cathodes_T_29) @[Mux.scala 101:16]
    node _io_seg7led_cathodes_T_31 = mux(_io_seg7led_cathodes_T, UInt<7>("h40"), _io_seg7led_cathodes_T_30) @[Mux.scala 101:16]
    io.seg7led.cathodes <= _io_seg7led_cathodes_T_31 @[Seg7LED.scala 19:23]
    io.seg7led.decimalPoint <= UInt<1>("h1") @[Seg7LED.scala 36:27]
    node _io_seg7led_anodes_T = dshl(UInt<1>("h1"), digitIndex) @[Seg7LED.scala 37:41]
    node _io_seg7led_anodes_T_1 = not(_io_seg7led_anodes_T) @[Seg7LED.scala 37:24]
    io.seg7led.anodes <= _io_seg7led_anodes_T_1 @[Seg7LED.scala 37:21]

  module Stopwatch :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip startStop : UInt<1>, seg7led : { cathodes : UInt<7>, decimalPoint : UInt<1>, anodes : UInt<8>}}

    inst ss_debounce of Debounce @[Debounce.scala 40:26]
    ss_debounce.clock <= clock
    ss_debounce.reset <= reset
    ss_debounce.io.in <= io.startStop @[Debounce.scala 41:20]
    node _msTrigger_T = not(ss_debounce.io.out) @[Stopwatch.scala 17:31]
    wire msTrigger_c_value : UInt @[Counter.scala 61:73]
    msTrigger_c_value <= UInt<1>("h0") @[Counter.scala 61:73]
    wire msTrigger : UInt<1> @[Counter.scala 117:24]
    msTrigger <= UInt<1>("h0") @[Counter.scala 117:24]
    when _msTrigger_T : @[Counter.scala 118:16]
      msTrigger <= UInt<1>("h1") @[Counter.scala 118:23]
    reg msCount : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Counter.scala 61:40]
    wire sTrigger : UInt<1> @[Counter.scala 117:24]
    sTrigger <= UInt<1>("h0") @[Counter.scala 117:24]
    when msTrigger : @[Counter.scala 118:16]
      node wrap_wrap = eq(msCount, UInt<7>("h63")) @[Counter.scala 73:24]
      node _wrap_value_T = add(msCount, UInt<1>("h1")) @[Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 77:24]
      msCount <= _wrap_value_T_1 @[Counter.scala 77:15]
      when wrap_wrap : @[Counter.scala 87:20]
        msCount <= UInt<1>("h0") @[Counter.scala 87:28]
      sTrigger <= wrap_wrap @[Counter.scala 118:23]
    reg sCount : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    wire mTrigger : UInt<1> @[Counter.scala 117:24]
    mTrigger <= UInt<1>("h0") @[Counter.scala 117:24]
    when sTrigger : @[Counter.scala 118:16]
      node wrap_wrap_1 = eq(sCount, UInt<6>("h3b")) @[Counter.scala 73:24]
      node _wrap_value_T_2 = add(sCount, UInt<1>("h1")) @[Counter.scala 77:24]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 77:24]
      sCount <= _wrap_value_T_3 @[Counter.scala 77:15]
      when wrap_wrap_1 : @[Counter.scala 87:20]
        sCount <= UInt<1>("h0") @[Counter.scala 87:28]
      mTrigger <= wrap_wrap_1 @[Counter.scala 118:23]
    reg mCount : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    wire hTrigger : UInt<1> @[Counter.scala 117:24]
    hTrigger <= UInt<1>("h0") @[Counter.scala 117:24]
    when mTrigger : @[Counter.scala 118:16]
      node wrap_wrap_2 = eq(mCount, UInt<6>("h3b")) @[Counter.scala 73:24]
      node _wrap_value_T_4 = add(mCount, UInt<1>("h1")) @[Counter.scala 77:24]
      node _wrap_value_T_5 = tail(_wrap_value_T_4, 1) @[Counter.scala 77:24]
      mCount <= _wrap_value_T_5 @[Counter.scala 77:15]
      when wrap_wrap_2 : @[Counter.scala 87:20]
        mCount <= UInt<1>("h0") @[Counter.scala 87:28]
      hTrigger <= wrap_wrap_2 @[Counter.scala 118:23]
    reg hCount : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Counter.scala 61:40]
    wire hCount_wrap : UInt<1> @[Counter.scala 117:24]
    hCount_wrap <= UInt<1>("h0") @[Counter.scala 117:24]
    when hTrigger : @[Counter.scala 118:16]
      node hCount_wrap_wrap = eq(hCount, UInt<5>("h17")) @[Counter.scala 73:24]
      node _hCount_wrap_value_T = add(hCount, UInt<1>("h1")) @[Counter.scala 77:24]
      node _hCount_wrap_value_T_1 = tail(_hCount_wrap_value_T, 1) @[Counter.scala 77:24]
      hCount <= _hCount_wrap_value_T_1 @[Counter.scala 77:15]
      when hCount_wrap_wrap : @[Counter.scala 87:20]
        hCount <= UInt<1>("h0") @[Counter.scala 87:28]
      hCount_wrap <= hCount_wrap_wrap @[Counter.scala 118:23]
    inst seg of Seg7LED @[Stopwatch.scala 23:19]
    seg.clock <= clock
    seg.reset <= reset
    io.seg7led <= seg.io.seg7led @[Stopwatch.scala 24:14]
    node _T = rem(msCount, UInt<4>("ha")) @[Stopwatch.scala 25:35]
    node _T_1 = div(msCount, UInt<4>("ha")) @[Stopwatch.scala 25:49]
    node _T_2 = bits(_T_1, 3, 0) @[Stopwatch.scala 25:55]
    node _T_3 = rem(sCount, UInt<4>("ha")) @[Stopwatch.scala 25:67]
    node _T_4 = div(sCount, UInt<4>("ha")) @[Stopwatch.scala 25:80]
    node _T_5 = bits(_T_4, 3, 0) @[Stopwatch.scala 25:86]
    node _T_6 = rem(mCount, UInt<4>("ha")) @[Stopwatch.scala 25:98]
    node _T_7 = div(mCount, UInt<4>("ha")) @[Stopwatch.scala 25:111]
    node _T_8 = bits(_T_7, 3, 0) @[Stopwatch.scala 25:117]
    node _T_9 = rem(hCount, UInt<4>("ha")) @[Stopwatch.scala 25:129]
    node _T_10 = div(hCount, UInt<4>("ha")) @[Stopwatch.scala 25:142]
    node _T_11 = bits(_T_10, 3, 0) @[Stopwatch.scala 25:148]
    wire _WIRE : UInt<4>[8] @[Stopwatch.scala 25:27]
    _WIRE[0] <= _T @[Stopwatch.scala 25:27]
    _WIRE[1] <= _T_2 @[Stopwatch.scala 25:27]
    _WIRE[2] <= _T_3 @[Stopwatch.scala 25:27]
    _WIRE[3] <= _T_5 @[Stopwatch.scala 25:27]
    _WIRE[4] <= _T_6 @[Stopwatch.scala 25:27]
    _WIRE[5] <= _T_8 @[Stopwatch.scala 25:27]
    _WIRE[6] <= _T_9 @[Stopwatch.scala 25:27]
    _WIRE[7] <= _T_11 @[Stopwatch.scala 25:27]
    seg.io.digits[0] <= _WIRE[0] @[Stopwatch.scala 25:17]
    seg.io.digits[1] <= _WIRE[1] @[Stopwatch.scala 25:17]
    seg.io.digits[2] <= _WIRE[2] @[Stopwatch.scala 25:17]
    seg.io.digits[3] <= _WIRE[3] @[Stopwatch.scala 25:17]
    seg.io.digits[4] <= _WIRE[4] @[Stopwatch.scala 25:17]
    seg.io.digits[5] <= _WIRE[5] @[Stopwatch.scala 25:17]
    seg.io.digits[6] <= _WIRE[6] @[Stopwatch.scala 25:17]
    seg.io.digits[7] <= _WIRE[7] @[Stopwatch.scala 25:17]

